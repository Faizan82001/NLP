# -*- coding: utf-8 -*-
"""Copy of natural_language_processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lucwKSQcu4iv83_s4o7cgj9XQaVCtVNh

# Natural Language Processing

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('Restaurant_Reviews.tsv', delimiter='\t', quoting=3)

"""## Cleaning the texts"""

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []
for i in range(0, 1000):
    review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])
    review = review.lower()
    review = review.split()
    ps = PorterStemmer()
    all_stopwords = stopwords.words('english')
    all_stopwords.remove('not')
    review = [ ps.stem(word) for word in review if not word in set(all_stopwords) ]
    review = ' '.join(review)
    corpus.append(review)

print(corpus)

"""## Creating the Bag of Words model"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=1500)
x = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, -1].values

len(x[0])

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

"""## Training the Naive Bayes model on the Training set"""

# from sklearn.naive_bayes import GaussianNB
# classifier = GaussianNB()
# classifier.fit(x_train, y_train)          //0.73

# from sklearn.linear_model import LogisticRegression
# classifier = LogisticRegression()
# classifier.fit(x_train, y_train)          //0.775

# from sklearn.neighbors import KNeighborsClassifier
# classifier = KNeighborsClassifier(n_neighbors=10, metric='euclidean')
# classifier.fit(x_train, y_train)          //0.65

from sklearn.svm import SVC
classifier = SVC(kernel='linear')
classifier.fit(x_train, y_train)            # 0.79

# from sklearn.ensemble import RandomForestClassifier
# classifier = RandomForestClassifier(n_estimators=100, criterion='entropy')
# classifier.fit(x_train, y_train)            //0.76-0.775

# from sklearn.tree import DecisionTreeClassifier
# classifier = DecisionTreeClassifier(criterion='entropy')
# classifier.fit(x_train, y_train)            //0.74

"""## Predicting the Test set results"""

y_pred = classifier.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

from sklearn.metrics import precision_score
precision_score(y_test, y_pred)

from sklearn.metrics import recall_score
recall_score(y_test, y_pred)

from sklearn.metrics import f1_score
f1_score(y_test, y_pred)